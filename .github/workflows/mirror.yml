name: Mirror rules to Pages（同步规则到 Pages）

permissions:
  contents: write

on:
  # A. 主仓库发布后可远程触发
  repository_dispatch:
    types: [sync_rules]
  # B. 手动运行（界面上会出现输入框）
  workflow_dispatch:
    inputs:
      url:
        description: RAW latest 地址（如：https://raw.githubusercontent.com/.../rules/01_工资模块_latest.md?plain=1）
        required: false
      version:
        description: 版本号（形如 v2025-09-17R7，可留空自动解析）
        required: false
  # C. 可选定时同步（需要可保留）
  schedule:
    - cron: "*/10 * * * *"

concurrency:
  group: mirror-rules-to-pages
  cancel-in-progress: false

jobs:
  mirror:
    runs-on: ubuntu-latest
    env:
      RAW_LATEST: "https://raw.githubusercontent.com/jj5638521/huijiang-assistant/main/rules/01_工资模块_latest.md?plain=1"
      RELEASES_API: "https://api.github.com/repos/jj5638521/huijiang-assistant/releases/latest"
      TAG_RAW_TMPL: "https://raw.githubusercontent.com/jj5638521/huijiang-assistant/%s/rules/01_工资模块_%s.md?plain=1"
      # 稳定回退（可按需更新）
      STABLE_TAG: "v2025-09-15R6-HF4"
      STABLE_URL: "https://raw.githubusercontent.com/jj5638521/huijiang-assistant/v2025-09-15R6-HF4/rules/01_工资模块_v2025-09-15R6-HF4.md?plain=1"

    steps:
      - name: Checkout（检出镜像仓）
        uses: actions/checkout@v4

      - name: Resolve inputs（解析输入与默认值）
        id: inp
        shell: bash
        run: |
          set -euo pipefail
          # repository_dispatch 的 client_payload 优先
          URL="${{ github.event.client_payload.url || '' }}"
          VER="${{ github.event.client_payload.version || '' }}"
          # 手动运行的 inputs 作为次选
          if [ -z "$URL" ]; then URL="${{ inputs.url || '' }}"; fi
          if [ -z "$VER" ]; then VER="${{ inputs.version || '' }}"; fi
          # 最后兜底：默认拉 RAW latest
          if [ -z "$URL" ]; then URL="${RAW_LATEST}"; fi
          echo "url=$URL" >> "$GITHUB_OUTPUT"
          echo "ver_input=$VER" >> "$GITHUB_OUTPUT"

      - name: Fetch with fallback + integrity check（抓取 + 校验 + 版本解析）
        id: fetch
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p payroll
          TMP="payroll/active.md.new"

          fetch_url() { # $1=url
            local u="$1"
            # 附带 cache-buster
            if [[ "$u" != *"?plain=1"* && "$u" != *"&plain=1"* ]]; then
              # 若无 plain=1，不强加；只加 ts
              :
            fi
            if [[ "$u" == *"?"* ]]; then
              u="${u}&ts=$(date +%s)"
            else
              u="${u}?ts=$(date +%s)"
            fi
            echo "::group::Fetch $u"
            curl -fsSL --connect-timeout 3 --max-time 8 -H 'Accept: text/plain, text/markdown' "$u" -o "$TMP"
            echo "::endgroup::"
          }

          # 仅做稳健必需校验：标题/版本/生效（兼容中英文括号、版本两种写法）
          integrity_and_parse() {
            local f="$1"
            # 标题：允许全/半角括号
            grep -Eq '^# 01_工资模块[（(]' "$f" || { echo "缺合法标题"; return 2; }

            # 版本：兼容两种格式
            # 1) 新式：版本 vYYYY-MM-DDRn
            if grep -Eq '^[[:space:]]*版本 v[0-9]{4}-[0-9]{2}-[0-9]{2}R[0-9]+$' "$f"; then
              ver_line=$(grep -m1 '^[[:space:]]*版本 v[0-9]' "$f")
              ver=$(echo "$ver_line" | awk '{print $2}')
            else
              # 2) 旧式：版本：YYYY-MM-DDRn（全/半角冒号均可），解析后补 v 前缀
              if grep -Eq '^[[:space:]]*版本[:：][[:space:]]*[0-9]{4}-[0-9]{2}-[0-9]{2}R[0-9]+$' "$f"; then
                ver=$(grep -m1 '^[[:space:]]*版本[:：]' "$f" | sed 's/.*[:：][[:space:]]*//')
                ver="v${ver}"
              else
                echo "未找到合法版本行"; return 2
              fi
            fi

            # 生效：支持“生效 2025-09-17”或“生效：2025-09-17”
            if grep -Eq '^[[:space:]]*生效([[:space:]]|[:：])[[:space:]]*[0-9]{4}-[0-9]{2}-[0-9]{2}$' "$f"; then
              eff=$(grep -m1 '^[[:space:]]*生效' "$f" | sed 's/.*[:： ]\+[[:space:]]*//')
            else
              echo "未找到生效日期"; return 2
            fi

            echo "version=$ver"   >> "$GITHUB_OUTPUT"
            echo "effective=$eff" >> "$GITHUB_OUTPUT"
            return 0
          }

          SRC=""
          URL="${{ steps.inp.outputs.url }}"

          echo "尝试：指定/默认 URL"
          if fetch_url "$URL" && integrity_and_parse "$TMP"; then
            SRC="raw"
          else
            echo "指定/默认 URL 失败，尝试 releases/latest → tag RAW"
            # 取最新 release 的 tag
            tag=$(curl -fsSL --connect-timeout 3 --max-time 6 "${RELEASES_API}" | grep -Eo '"tag_name":[[:space:]]*"[^"]+"' | head -n1 | sed 's/.*:"\([^"]\+\)".*/\1/')
            if [ -n "${tag:-}" ]; then
              url_tag=$(printf "${TAG_RAW_TMPL}" "$tag" "$tag")
              echo "尝试 tag RAW：$url_tag"
              if fetch_url "$url_tag" && integrity_and_parse "$TMP"; then
                SRC="tag:${tag}"
              fi
            fi
            # 稳定回退
            if [ -z "${SRC}" ]; then
              echo "尝试稳定回退：${STABLE_URL}"
              if fetch_url "${STABLE_URL}" && integrity_and_parse "$TMP"; then
                SRC="stable:${STABLE_TAG}"
              fi
            fi
          fi

          if [ -z "${SRC}" ]; then
            echo "::warning ::所有远端源不可用或校验失败，保持现有 active.md（若存在）不变。"
            echo "updated=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # 覆盖正式文件 + 生成 TXT + 写 meta
          mv "$TMP" payroll/active.md
          sed 's/\r$//' payroll/active.md > payroll/active.txt
          printf '' > .nojekyll

          echo "source=${SRC}" >> "$GITHUB_OUTPUT"
          echo "updated=true"  >> "$GITHUB_OUTPUT"

      - name: Commit if changed（有变更才提交）
        if: steps.fetch.outputs.updated == 'true'
        shell: bash
        run: |
          set -euo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add payroll/active.md payroll/active.txt .nojekyll || true
          if ! git diff --cached --quiet; then
            ver="${{ steps.fetch.outputs.version || '' }}"
            eff="${{ steps.fetch.outputs.effective || '' }}"
            src="${{ steps.fetch.outputs.source || '' }}"
            git commit -m "Mirror: update active (ver=${ver:-n/a}, eff=${eff:-n/a}, src=${src:-n/a})"
            git push
          else
            echo "No change."
          fi

      - name: Summary（运行摘要）
        run: |
          {
            echo "### Mirror result"
            echo "- updated : **${{ steps.fetch.outputs.updated }}**"
            echo "- source  : **${{ steps.fetch.outputs.source || 'n/a' }}**"
            echo "- version : **${{ steps.fetch.outputs.version || 'n/a' }}**"
            echo "- effective: **${{ steps.fetch.outputs.effective || 'n/a' }}**"
            echo ""
            echo "生成："
            echo "- payroll/active.md （Pages 主文件，text/markdown）"
            echo "- payroll/active.txt （text/plain 旁路）"
            echo "- .nojekyll"
          } >> "$GITHUB_STEP_SUMMARY"
